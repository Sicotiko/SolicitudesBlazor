@using BlazorApp1.Client.Services.Dialogs
@using BlazorApp1.Client.Services.Notifications
@using BlazorApp1.Client.Utilities;
@using BlazorApp1.Shared.Excepciones
@using BlazorApp1.Shared.Modelo.Comunas
@using BlazorApp1.Shared.Modelo.Moviles;
@using BlazorApp1.Shared.Modelo.Retiros
@using BlazorApp1.Shared.Utilities
@using System.Timers
@using BlazorApp1.Shared.Utlilities;
@using BlazorApp1.Shared.ViewModel
@inject INoteService Note
@inject IDialogFrameService dialog
@inject LoadingScreen LoadScreen
@inject NotificationService NotificationRepo

@inject RetirosService retirosService
@inject MovilesService movilesService
@inject IClipboardService clipboardService


<RadzenCard>
    <RadzenText TextStyle="TextStyle.DisplayH2" Text="Asignacion de retiros por sector:" />
</RadzenCard>

<div class="container-fluid">
    <div class="row px-3">
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenText Text="Sector" />
                <RadzenDropDown @bind-Value="sectorName"
                                TValue="NombreSector"
                                Data="Enum.GetValues(typeof(NombreSector))">
                    <Template Context="data">
                        @(((NombreSector)data).GetEnumDescription())
                    </Template>
                </RadzenDropDown>
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <div class="row px-2">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                  Text="Actualizar"
                                  Icon="sync"
                                  Click="BtnActualizarClick" />
                </div>
                <div class="row px-2" style="margin-top: 10px;">
                    <RadzenCheckBox TValue="bool"
                    @bind-Value="autoActualizacion"
                                    Name="autoRefreshChk"
                                    Change=TryToActivateTimer />
                    <RadzenLabel Text="Auto Actualizar?"
                                 Component="autoRefreshChk"
                                 Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div class="row px-2" style="margin-top: 10px;">
                    <RadzenDatePicker TValue="DateTime"
                                      ShowTime="true"
                                      TimeOnly="true"
                                      ShowSeconds="true"
                                      DateFormat="mm:ss"
                    @bind-Value="FiveMinutesToRefresh"
                                      ReadOnly="false"
                                      Change=@(args => TimeToRespawn = args) />
                </div>
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                              Text="Asignar Seleccionados"
                              Icon="assignment_turned_in"
                              Click="ConfirmToAssign"
                              Disabled="GridLoading" />
                <RadzenButton Text="Actualizar"
                              Disabled="true"
                              Click="@gridActual.Reload" />
            </RadzenCard>
        </div>
    </div>
</div>
@*<RadzenCard>*@
<RadzenText Text=@($"Retiros a Asignar ({RetirosActual.Count()}) Retiros Pendientes") />

<RadzenDataGrid @ref="gridActual"
                TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                Data="RetirosActual.AsEnumerable()"
                AllowPaging="true"
                PageSize="50"
                Density="Density.Compact"
                AllowAlternatingRows="true"
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.And"
                IsLoading="GridLoading"
                SelectionMode="DataGridSelectionMode.Single"
@bind-Value="@selectedRetiros"
                CellContextMenu="@OnCellContextMenu"
                AllowColumnResize="true">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Sin retiros segun parametros.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Asignar"
                              Title="Asignar?"
                              Filterable="false"
                              Sortable="false"
                              Width="50px">
            <Template Context="retiro">
                <RadzenCheckBox @bind-Value="retiro.Asignar" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoRetiro"
                              Title="N° Retiro"
                              Width="130px">
            <Template Context="retiro">
                <RadzenButton Text="@retiro.CodigoRetiro.ToString()"
                              Click="@(args => OpenDetail(retiro))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Nombre"
                              Title="Nombre"
                              Width="200px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoCliente"
                              Title="N° Cliente"
                              Width="117px">
            <Template Context="data">
                <RadzenIcon Icon="right_click"
                            IconStyle="IconStyle.Info" />
                <RadzenText Text="@data.CodigoCliente"
                            TextStyle="TextStyle.Subtitle1"
                @ondblclick="@(args => CopiarAlPortapapeles(data.CodigoCliente))" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Direccion"
                              Title="Direccion"
                              Width="250px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Comuna.Nombre"
                              Title="Comuna"
                              Width="100px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Title="Horario"
                              Width="70px">
            <Template Context="data">
                @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).AmDesde.ToShortTimeString()) - @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).AmHasta.ToShortTimeString()) <br />
                @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).PmDesde.ToShortTimeString()) - @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).PmHasta.ToShortTimeString())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Bultos"
                              Title="Bultos"
                              Width="60px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Kilos"
                              Title="Kilos"
                              Width="60px">
            <Template Context="data">
                @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).Kilos) (Kg)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Movil"
                              FilterProperty="Movil.Codigo"
                              FilterOperator="FilterOperator.Equals"
                              Title="Movil"
                              Width="220px">
            <Template Context="retiro">
                @* <RadzenTextBox @bind-Value="retiro.Movil"
                MaxLength="6" /> *@
                <RadzenDropDown @bind-Value="retiro.Movil"
                                TValue="Movil"
                                Data="@movilesService.MovilesDisponibles"
                                AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterOperator="StringFilterOperator.Contains"
                                TextProperty="Codigo">
                    <Template Context="data">
                        @((data as Movil).Codigo + " || " + (data as Movil).Nombre)
                    </Template>
                </RadzenDropDown>

            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>


@code {


    List<BlazorApp1.Shared.Modelo.Retiros.Retiro> RetirosActual = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
    IList<BlazorApp1.Shared.Modelo.Retiros.Retiro> selectedRetiros;

    NombreSector sectorName;
    RadzenDataGrid<BlazorApp1.Shared.Modelo.Retiros.Retiro> gridActual;
    bool GridLoading, autoActualizacion = false;
    DateTime FiveMinutesToRefresh = DateTime.ParseExact("00:00", "mm:ss", System.Globalization.CultureInfo.InvariantCulture);
    DateTime? TimeToRespawn;
    int asignados = 0;
    Timer timerTickSecond;

    private void dd()
    {
        // RetirosActual.First().Movil.Codigo

    }


    protected override async Task OnInitializedAsync()
    {
        timerTickSecond = new Timer(1000);
        timerTickSecond.Elapsed += TimerTickSecondElapsed;
        await base.OnInitializedAsync();
    }

    private void ResetTimer()
    {
        FiveMinutesToRefresh = TimeToRespawn.Value;
    }

    private void TryToActivateTimer()
    {
        if (autoActualizacion)
        {
            if (!ValidateTimerTime())
            {
                Note.NotifyTime();
                autoActualizacion = false;
            }
        }

        ChangeTimerState();
    }

    private void ChangeTimerState()
    {
        timerTickSecond.Enabled = autoActualizacion;
    }

    private async void TimerTickSecondElapsed(object? value, ElapsedEventArgs e)
    {
        FiveMinutesToRefresh = FiveMinutesToRefresh.AddSeconds(-1);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        if (FiveMinutesToRefresh.Hour == 0 &&
            FiveMinutesToRefresh.Minute == 0 &&
            FiveMinutesToRefresh.Second == 0)
        {
            ResetTimer();
            await AsignacionAsync();
            await PoblarRetirosOrigen();
        }
    }
    private bool ValidateTimerTime()
    {
        if (ValidateTimeNotNull())
            return false;
        if (ValidateHours() &&
            ValidateMinutes() &&
            ValidateMinSeconds())
            return false;

        return true;
    }
    private bool ValidateTimeNotNull()
    {
        return TimeToRespawn == null;
    }
    private bool ValidateMinSeconds()
    {
        return TimeToRespawn.Value.Second < 15;
    }
    private bool ValidateMinutes()
    {
        return TimeToRespawn.Value.Minute == 0;
    }
    private bool ValidateHours()
    {
        return TimeToRespawn.Value.Hour == 0;
    }


    private async void BtnActualizarClick()
    {
        TryToActivateTimer();
        await PoblarRetirosOrigen();
    }
    private async Task PoblarRetirosOrigen()
    {
        try
        {

            RetirosActual = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
            FiltroBusquedaRetiros filtro = new FiltroBusquedaRetiros
                {
                    Estado = Estado.PEND,
                    FechaDesde = DateTime.Now.Date,
                    Hasta = DateTime.Now.Date,
                    NombreSector = sectorName
                };

            LoadScreen.Show($"Buscando retiros pendientes");
            await LoadRetiros(filtro);
            LoadScreen.Close();
        }
        catch (ExceptionResponse exRes)
        {
            NotificationRepo.Notify(NotificationSeverity.Error, "Error!", exRes.Message);
            LoadScreen.Close();
        }
        catch (Exception exRes)
        {
            NotificationRepo.Notify(NotificationSeverity.Error, "Error!", exRes.Message);
            LoadScreen.Close();
        }
        LoadScreen.Close();

    }
    private async Task LoadRetiros(FiltroBusquedaRetiros filtro)
    {
        var newlist = await retirosService.GetRetirosPorSectorAsync(filtro);
        foreach (var obj in newlist)
            obj.Movil = null;
        RetirosActual.AddRange(newlist);
        await gridActual.Reload();
    }


    private async Task AsignacionAsync()
    {

        LoadScreen.Show("Asignando...");
        try
        {
            // List<Task> tasks = new List<Task>();
            asignados = 0;
            foreach (var retiro in RetirosActual.Where(r => r.Asignar == true &&
                                                            r.Movil != null))
            {
                // if (ListadoMovilesDisponibles.TipoMoviles.FirstOrDefault(tp => tp.Codigo.Contains(retiro.Movil)) == null)
                // {
                //     NotificationRepo.Notify(NotificationSeverity.Error, "MOVIL NO DISPONIBLE", $"El movil {retiro.Movil} no esta disponible en alertran", 15000);
                //     continue;
                // }

                // tasks.Add(retirosService.AsignarAsync(retiro));
                await retirosService.AsignarAsync(retiro);
                asignados++;
                // await ObtenerOrdenTrabajo(retiro);

                // await RetirosRepo.AsignarAsync(retiro);
                // asignados++;
                //RetirosActual.Remove(retiro);
            }
            // await Task.WhenAll(tasks);
        }
        catch
        {
            throw;
        }
        LoadScreen.Close();
        ConfirmFinishedWork();

    }



    async void ConfirmToAssign()
    {
        bool? Confirm = await dialog.OpenConfirmDialogAsync($"Confirme la asignacion del sector {sectorName.ToString()}", "Confirmacion");

        if (Confirm != null)
            if ((bool)Confirm)
            {
                try
                {
                    //ResetTimer();
                    await AsignacionAsync();
                }
                catch (ExceptionResponse ex)
                {
                    LoadScreen.Close();

                    Note.NotifyResponse(ex);
                }
                catch (NullReferenceException nullEx)
                {
                    LoadScreen.Close();

                    Note.NotifyNull(nullEx);
                }
            }

        await gridActual.Reload();

    }

    void ConfirmFinishedWork()
    {
        dialog.OpenAlertDialogAsync($"{asignados} Retiros asignados", "Completo");
    }
    public async Task OpenDetail(Retiro retiroModel)
    {
        await dialog.OpenRetiroDetailAsync(retiroModel);
    }

    private async Task CopiarAlPortapapeles(string TextToCopy)
    {
        await clipboardService.CopyToClipboard(TextToCopy);
        NotificationRepo.Notify(NotificationSeverity.Info, "Texto Copiado", TextToCopy, 1500d);
    }
    private async Task OnCellContextMenu(DataGridCellMouseEventArgs<BlazorApp1.Shared.Modelo.Retiros.Retiro> args)
    {
        // selectedRetiros = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>() { args.Data };
        // await Task.Run(() =>
        // {

        //     ContextMenuService.Open(args,
        //     new List<ContextMenuItem> {
        //         new ContextMenuItem(){ Text = "Buscar Historial", Value = 1, Icon = "history" },
        //         new ContextMenuItem(){ Text = "Copiar al portapapeles", Value = 2, Icon = "content_copy" }
        //         // new ContextMenuItem(){ Text = "Context menu item 3", Value = 3, Icon = "info" },
        //                                                                                                         },
        //     async (e) =>
        //     {
        //         switch (int.Parse(e.Value.ToString()))
        //         {
        //             case 1:
        //                 await CopiarAlPortapapeles(args.Data.CodigoCliente);
        //                 break;
        //             case 2:
        //                 break;
        //         }
        //         Console.WriteLine("");
        //         // console.Log($"Menu item with Value={e.Value} clicked. Column: {args.Column.Property}, EmployeeID: {args.Data.EmployeeID}");
        //     }
        //  );
        // });
    }

    private async Task ShowHistoryClient(Retiro retiro)
    {
        FiltroBusquedaRetiros filtro = new FiltroBusquedaRetiros();


    }
}
