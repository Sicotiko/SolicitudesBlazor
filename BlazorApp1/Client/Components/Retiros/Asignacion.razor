@using BlazorApp1.Client.Services.Dialogs
@using BlazorApp1.Client.Services.Notifications
@using BlazorApp1.Shared.Excepciones
@using BlazorApp1.Shared.Modelo.Comunas
@using BlazorApp1.Shared.Modelo.Retiros
@using BlazorApp1.Shared.Utilities
@using System.Timers
@using BlazorApp1.Shared.ViewModel
@inject IRetirosRepoService RetirosRepo
@inject IOrdenTrabajoRepoService OrdenesRepo
@inject INoteService Note
@inject IDialogFrameService dialog
@inject LoadingScreen LoadScreen
@inject ListadoTipoMovil ListadoMovilesDisponibles
@inject NotificationService NotificationRepo


<RadzenCard>
    <RadzenText TextStyle="TextStyle.DisplayH2" Text="Asignacion de retiros por sector:" />
</RadzenCard>

<div class="container-fluid">
    <div class="row px-3">
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenText Text="Sector" />
                <RadzenDropDown Data="@(Enum.GetValues(typeof(SectorName)).Cast<Enum>())"
                                @bind-Value="sectorName" />
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <div class="row px-2">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                  Text="Actualizar"
                                  Icon="sync"
                                  Click="BtnActualizarClick" />
                </div>
                <div class="row px-2" style="margin-top: 10px;">
                    <RadzenCheckBox TValue="bool"
                                    @bind-Value="autoActualizacion"
                                    Name="autoRefreshChk"
                                    Change=TryToActivateTimer />
                    <RadzenLabel Text="Auto Actualizar?"
                                 Component="autoRefreshChk"
                                 Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div class="row px-2" style="margin-top: 10px;">
                    <RadzenDatePicker TValue="DateTime"
                                      ShowTime="true"
                                      TimeOnly="true"
                                      ShowSeconds="true"
                                      DateFormat="mm:ss"
                                      @bind-Value="FiveMinutesToRefresh"
                                      ReadOnly="false"
                                      Change=@(args => TimeToRespawn = args) />
                </div>
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                              Text="Asignar Seleccionados"
                              Icon="assignment_turned_in"
                              Click="ConfirmToAssign"
                              Disabled="GridLoading" />
            </RadzenCard>
        </div>
    </div>
</div>
@*<RadzenCard>*@
<RadzenText Text=@($"Retiros a Asignar ({RetirosActual.Count()}) Retiros Pendientes") />

<RadzenDataGrid TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                Data="RetirosActual"
                @ref="gridActual"
                AllowPaging="true"
                PageSize="50"
                AllowAlternatingRows="true"
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.And"
                IsLoading="GridLoading"
                AllowColumnResize="true">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Sin retiros segun parametros.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Asignar"
                              Title="Asignar?"
                              Filterable="false"
                              Sortable="false"
                              Width="60px">
            <Template Context="retiro">
                <RadzenCheckBox @bind-Value="retiro.Asignar" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoRetiro"
                              Title="N° Retiro"
                              Width="122px">
            <Template Context="retiro">
                <RadzenButton Text="@retiro.CodigoRetiro"
                              Click="@(args => OpenDetail(retiro))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Nombre"
                              Title="Nombre"
                              Width="200px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoCliente"
                              Title="N° Cliente"
                              Width="85px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Direccion"
                              Title="Direccion"
                              Width="250px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Comuna"
                              Title="Comuna"
                              Width="100px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Title="Horario"
                              Width="70px">
            <Template Context="data">
                @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).AmDesde.ToShortTimeString()) - @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).AmHasta.ToShortTimeString()) <br />
                @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).PmDesde.ToShortTimeString()) - @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).PmHasta.ToShortTimeString())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Bultos"
                              Title="Bultos"
                              Width="100px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Kilos"
                              Title="Kilos"
                              Width="100px">
            <Template Context="data">
                @((data as BlazorApp1.Shared.Modelo.Retiros.Retiro).Kilos) (Kg)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Movil"
                              Title="Movil"
                              Width="85px">
            <Template Context="retiro">
                <RadzenTextBox @bind-Value="retiro.Movil"
                               MaxLength="6" />
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>


@code {
    List<BlazorApp1.Shared.Modelo.Retiros.Retiro> RetirosActual = new List<Retiro>();
    SectorName sectorName;
    RadzenDataGrid<BlazorApp1.Shared.Modelo.Retiros.Retiro> gridActual;
    bool GridLoading, autoActualizacion = false;
    DateTime FiveMinutesToRefresh = DateTime.ParseExact("00:00", "mm:ss", System.Globalization.CultureInfo.InvariantCulture);
    DateTime? TimeToRespawn;
    int asignados = 0;
    Timer timerTickSecond;

    protected override async Task OnInitializedAsync()
    {
        timerTickSecond = new Timer(1000);
        timerTickSecond.Elapsed += TimerTickSecondElapsed;
        await base.OnInitializedAsync();
    }

    private void ResetTimer()
    {
        FiveMinutesToRefresh = TimeToRespawn.Value;
    }

    private void TryToActivateTimer()
    {
        if (autoActualizacion)
        {
            if (!ValidateTimerTime())
            {
                Note.NotifyTime();
                autoActualizacion = false;
            }
        }

        ChangeTimerState();
    }

    private void ChangeTimerState()
    {
        timerTickSecond.Enabled = autoActualizacion;
    }

    private async void TimerTickSecondElapsed(object? value, ElapsedEventArgs e)
    {
        FiveMinutesToRefresh = FiveMinutesToRefresh.AddSeconds(-1);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        if (FiveMinutesToRefresh.Hour == 0 &&
            FiveMinutesToRefresh.Minute == 0 &&
            FiveMinutesToRefresh.Second == 0)
        {
            ResetTimer();
            await AsignacionAsync();
            await PoblarRetirosOrigen();
        }
    }
    private bool ValidateTimerTime()
    {
        if (ValidateTimeNotNull())
            return false;
        if (ValidateHours() &&
            ValidateMinutes() &&
            ValidateMinSeconds())
            return false;

        return true;
    }
    private bool ValidateTimeNotNull()
    {
        return TimeToRespawn == null;
    }
    private bool ValidateMinSeconds()
    {
        return TimeToRespawn.Value.Second < 15;
    }
    private bool ValidateMinutes()
    {
        return TimeToRespawn.Value.Minute == 0;
    }
    private bool ValidateHours()
    {
        return TimeToRespawn.Value.Hour == 0;
    }


    private async void BtnActualizarClick()
    {
        TryToActivateTimer();
        await PoblarRetirosOrigen();
    }
    private async Task PoblarRetirosOrigen()
    {
        try
        {

            RetirosActual = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
            var comunas = Comunas.GetComunasPorSector(sectorName);

            foreach (var comuna in comunas)
            {
                LoadScreen.Show($"Buscando en {comuna.Key}");
                var newList = await RetirosRepo.GetRetirosPendientes("TODOS", comuna.Value, DateTime.Today, DateTime.Today);
                newList.ToList().ForEach(ret => ret.Movil = string.Empty);
                //newList.ToList().ForEach(ret => ret.Asignar = false);
                RetirosActual.AddRange(newList);
                await gridActual.Reload();
                LoadScreen.Close();
            }
        }catch(ExceptionResponse exRes)
        {
            NotificationRepo.Notify(NotificationSeverity.Error,"Error!",exRes.Message);
            LoadScreen.Close();
        }

    }

    private async Task ObtenerOrdenTrabajo(Retiro retiro)
    {
        //await BusyDialog("Asignando N° de OT");


        var ote = OrdenesRepo.Ordenes.FirstOrDefault(ot => ot.Tipo == retiro.TipoRetiro &&
                                                           ot.Movil == retiro.Movil &&
                                                           ot.Fecha == DateTime.Today &&
                                                           ot.Estado != "CERRADA" &&
                                                           ot.Repartos == 0);

        if (ote == null)
        {
            ote = await OrdenesRepo.CreateOrden(int.Parse(retiro.Movil));
            ote.Tipo = retiro.TipoRetiro;
            ote.SectorName = sectorName;
            ote.Comuna = retiro.Comuna;
            OrdenesRepo.Ordenes.Add(ote);
        }

        retiro.Ot = ote.Numero;
    }

    private async Task AsignacionAsync()
    {

        LoadScreen.Show("Asignando...");
        try
        {
            asignados = 0;
            foreach (var retiro in RetirosActual.Where(r => r.Asignar == true &&
                                                            r.Movil != ""))
            {
                if (ListadoMovilesDisponibles.TipoMoviles.FirstOrDefault(tp => tp.Codigo.Contains(retiro.Movil)) == null)
                {
                    NotificationRepo.Notify(NotificationSeverity.Error, "MOVIL NO DISPONIBLE", $"El movil {retiro.Movil} no esta disponible en alertran", 15000);
                    continue;
                }

                await ObtenerOrdenTrabajo(retiro);

                await RetirosRepo.AsignarAsync(retiro);
                asignados++;
                //RetirosActual.Remove(retiro);
            }
        }
        catch
        {
            throw;
        }
        LoadScreen.Close();
        ConfirmFinishedWork();

    }

    async void ConfirmToAssign()
    {
        bool? Confirm = await dialog.OpenConfirmDialogAsync($"Confirme la asignacion del sector {sectorName.ToString()}", "Confirmacion");

        if (Confirm != null)
            if ((bool)Confirm)
            {
                try
                {
                    //ResetTimer();
                    await AsignacionAsync();
                }
                catch (ExceptionResponse ex)
                {
                    LoadScreen.Close();

                    Note.NotifyResponse(ex);
                }
                catch (NullReferenceException nullEx)
                {
                    LoadScreen.Close();

                    Note.NotifyNull(nullEx);
                }
            }

        await gridActual.Reload();

    }

    void ConfirmFinishedWork()
    {
        dialog.OpenAlertDialogAsync($"{asignados} Retiros asignados", "Completo");
    }
    public async Task OpenDetail(Retiro retiroModel)
    {
        await dialog.OpenRetiroDetailAsync(retiroModel);
    }
}
