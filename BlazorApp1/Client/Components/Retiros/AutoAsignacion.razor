@using BlazorApp1.Client.Services.Comunas;
@using BlazorApp1.Client.Services.Dialogs
@using BlazorApp1.Client.Services.Notifications
@using BlazorApp1.Shared.Excepciones
@using BlazorApp1.Shared.Modelo.Comunas
@using BlazorApp1.Shared.Modelo.Retiros
@using BlazorApp1.Shared.Utilities
@using BlazorApp1.Shared.Utlilities;
@using BlazorApp1.Shared.ViewModel
@inject INoteService Note
@inject IDialogFrameService dialog
@inject LoadingScreen LoadScreen
@inject NotificationService NotificationRepo

@inject RetirosService retirosService
@inject MovilesService movilesService
@inject ComunaService comunaService

<RadzenCard>
    <RadzenText TextStyle="TextStyle.DisplayH3" Text="Auto asignacion de Courier y Valijas:" />
</RadzenCard>


<div class="container-fluid">
    <div class="row px-3">
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenText Text="Sector" />
                <RadzenDropDown @bind-Value="sectorName"
                                TValue="NombreSector"
                                Data="Enum.GetValues(typeof(NombreSector))">
                    <Template Context="data">
                        @(((NombreSector)data).GetEnumDescription())
                    </Template>
                </RadzenDropDown>
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenText Text="Fecha Origen" />
                <RadzenDatePicker @bind-Value="FechaOrigen"
                                  DateFormat="d" />
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                              Text="Preparar Todo"
                              Click="Preparacion" />
                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                              Text="Asignar Seleccionados"
                              Click="ConfirmToAssign"
                              Disabled="GridLoading" />
                <RadzenButton Text="Actualizar"
                              Disabled="true"
                              Click="@gridActual.Reload" />
            </RadzenCard>
        </div>
    </div>
</div>
@*<RadzenCard>*@
<RadzenText Text=@CantidadRetirosString />
<RadzenDataGrid TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                Data="RetirosActual.AsEnumerable()"
@ref="gridActual"
                AllowPaging="true"
                PageSize="50"
                AllowAlternatingRows="true"
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                IsLoading="GridLoading"
                AllowColumnResize="true">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Sin retiros segun parametros .</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Asignar"
                              Title="Asignar?"
                              Filterable="false"
                              Sortable="false"
                              Width="60px">
            <Template Context="retiro">
                <RadzenCheckBox @bind-Value="retiro.Asignar" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoRetiro"
                              Title="N° Retiro"
                              Width="130px">
            <Template Context="retiro">
                <RadzenButton Text="@retiro.CodigoRetiro.ToString()"
                              Click="@(args => OpenDetail(retiro))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Nombre"
                              Title="Nombre"
                              Width="200px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoCliente"
                              Title="N° Cliente"
                              Width="117px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Direccion"
                              Title="Direccion"
                              Width="250px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Comuna.Nombre"
                              Title="Comuna"
                              Width="100px" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Movil"
                              Title="Movil"
                              FilterProperty="Movil.Codigo"
                              FilterOperator="FilterOperator.Equals"
                              Width="220px">
            <Template Context="retiro">
                <RadzenDropDown @bind-Value="retiro.Movil"
                                TValue="BlazorApp1.Shared.Modelo.Moviles.Movil"
                                Data="movilesService.MovilesDisponibles"
                                AllowClear="true"
                                TextProperty="Codigo"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterOperator="StringFilterOperator.Contains">
                    <Template Context="movil">
                        @($"{(movil as BlazorApp1.Shared.Modelo.Moviles.Movil).Codigo} || {(movil as BlazorApp1.Shared.Modelo.Moviles.Movil).Nombre}")
                    </Template>
                </RadzenDropDown>
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
@*</RadzenCard>*@

@code {
    List<BlazorApp1.Shared.Modelo.Retiros.Retiro> RetirosOrigen = new List<Retiro>();
    List<BlazorApp1.Shared.Modelo.Retiros.Retiro> RetirosActual = new List<Retiro>();
    private NombreSector sectorName;
    DateTime FechaOrigen = DateTime.Now.Date;
    DateTime FechaActual = DateTime.Now.Date;
    //RadzenDataGrid<BlazorApp1.Shared.Modelo.Retiros.Retiro> gridOrigen;
    RadzenDataGrid<BlazorApp1.Shared.Modelo.Retiros.Retiro> gridActual;
    bool GridLoading = false;
    int asignados = 0;
    bool asignar = true;
    private string CantidadRetirosString = "Retiros a Asignar (0) Retiros Pendientes";



    private async Task PoblarRetirosOrigen()
    {
        //await BusyDialog("Leyendo retiros anteriores");

        RetirosOrigen = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
        List<Task> tasks = new List<Task>();
        var oComunas = await comunaService.GetComunasPorSector(sectorName);
        FiltroBusquedaRetiros filtro = new FiltroBusquedaRetiros
            {
                Estado = Estado.Todos,
                FechaDesde = FechaOrigen,
                Hasta = FechaOrigen,
            };
        // var comunas = Comunas.GetComunasPorSector(sectorName);
        for (int i = 0; i < 2; i++)
        {
            filtro.TipoEntrada = i == 0 ? TipoEntrada.COURIER : TipoEntrada.VALIJA;
            foreach (var comuna in oComunas)
            {
                // IEnumerable<BlazorApp1.Shared.Modelo.Retiros.Retiro> retiros = await RetirosRepo.GetRetirosTodosLosEstados(TipoRetiro, comuna.CodigoPostal, FechaOrigen, FechaOrigen);
                // RetirosOrigen.AddRange(retiros);
                filtro.Poblacion = comuna.CodigoPostal;
                tasks.Add(AddRetirosOrigenAsync(filtro));

                // var newList = await retirosService.GetRetirosAsync(filtro);
                // RetirosActual.AddRange(newList);
            }
            //Ordenar por algun campo el listado
        }
        await Task.WhenAll(tasks);
        //await gridOrigen.Reload();
    }
    private async Task PoblarRetirosActuales()
    {
        //await BusyDialog("Leyendo retiros pendientes");

        RetirosActual = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
        List<Task> tasks = new List<Task>();
        var oComunas = await comunaService.GetComunasPorSector(sectorName);
        // var comunas = Comunas.GetComunasPorSector(sectorName);

        FiltroBusquedaRetiros filtro = new FiltroBusquedaRetiros
            {
                Estado = Estado.PEND,
                FechaDesde = FechaActual,
                Hasta = FechaActual,
            };
        for (int i = 0; i < 2; i++)
        {
            filtro.TipoEntrada = i == 0 ? TipoEntrada.COURIER : TipoEntrada.VALIJA;
            foreach (var comuna in oComunas)
            {
                // //DEBUG
                // IEnumerable<BlazorApp1.Shared.Modelo.Retiros.Retiro> retiros = await RetirosRepo.GetRetirosPendientes(TipoRetiro, comuna.CodigoPostal, FechaActual, FechaActual);
                // //IEnumerable<BlazorApp1.Shared.Modelo.Retiros.Retiro> retiros = await RetirosRepo.GetRetirosPendientes("FICHERO", comuna.Value, FechaActual, FechaActual);

                // RetirosActual.AddRange(retiros);
                filtro.Poblacion = comuna.CodigoPostal;
                tasks.Add(AddRetirosActualesAsync(filtro));
                // var newList = await retirosService.GetRetirosAsync(filtro);
                // RetirosActual.AddRange(newList);

            }
            //Ordenar por algun campo el listado
        }
        await Task.WhenAll(tasks);
        await gridActual.Reload();

    }
    private async Task AddRetirosActualesAsync(FiltroBusquedaRetiros filtro)
    {
        var newList = await retirosService.GetRetirosAsync(filtro);
        RetirosActual.AddRange(newList);
    }
    private async Task AddRetirosOrigenAsync(FiltroBusquedaRetiros filtro)
    {
        var newList = await retirosService.GetRetirosAsync(filtro);
        RetirosOrigen.AddRange(newList);
    }
    private async Task MezclaRetiros()
    {

        if (RetirosActual == null)
            throw new NullReferenceException($"{nameof(RetirosActual)} El listado no puede ser nulo.");
        if (RetirosOrigen == null)
            throw new NullReferenceException($"{nameof(RetirosOrigen)} El listado no puede ser nulo.");
        //await BusyDialog("Haciendo la \"MAGIA\"");

        foreach (var retiro in RetirosActual)
        {
            retiro.Movil = null; // limpieza de movil asignado por sector por defecto
            var retiroToMix = RetirosOrigen.FirstOrDefault(r => r.Nombre == retiro.Nombre &&
                                                                r.Direccion == retiro.Direccion &&
                                                                r.Contacto == retiro.Contacto &&
                                                                r.AmDesde == retiro.AmDesde &&
                                                                r.AmHasta == retiro.AmHasta &&
                                                                r.PmDesde == retiro.PmDesde &&
                                                                r.PmHasta == retiro.PmHasta);

            if (retiroToMix == null)
                continue;
            else
            {
                if (retiroToMix.Movil == null)
                    continue;
                retiro.Movil = movilesService.MovilesDisponibles.FirstOrDefault(m => m.Codigo == retiroToMix.Movil?.Codigo);
            }

        }
        //await gridOrigen.Reload();
        await gridActual.Reload();
    }

    private async Task Preparacion()
    {
        GridLoading = true;

        //BusyDialog();
        //await Task.Run(() => BusyDialog());
        LoadScreen.Show("Cargando...");

        await InvokeAsync(async () =>
        {
            try
            {
                await PoblarRetirosOrigen();
                await PoblarRetirosActuales();
                await MezclaRetiros();
                LoadScreen.Close();
            }
            catch (ExceptionResponse ex)
            {
                LoadScreen.Close();

                Note.NotifyResponse(ex);
            }
            catch (NullReferenceException nullEx)
            {
                LoadScreen.Close();

                Note.NotifyNull(nullEx);
            }
        });
        //await BusyDialog();

        await gridActual.Reload();
        GridLoading = false;
        CantidadRetirosString = $"Retiros a Asignar ({RetirosActual.Count()}) Retiros Pendientes";
        LoadScreen.Close();
    }
    private async Task Asignacion()
    {

        //BusyDialog();
        // List<Task> tasks = new List<Task>();
        LoadScreen.Show("Cargando...");
        asignados = 0;
        if (RetirosActual == null || RetirosOrigen == null)
            Note.NotifyVoidData();
        else
            foreach (var retiro in RetirosActual.Where(r => r.Asignar == true))
            {
                if (retiro.Movil == null)
                    continue;
                // if (movilesService.MovilesDisponibles.FirstOrDefault(tp => tp.Codigo.Contains(retiro.Movil)) == null)
                // {
                //     NotificationRepo.Notify(NotificationSeverity.Error, "MOVIL NO DISPONIBLE", $"El movil {retiro.Movil} no esta disponible en alertran", 15000);
                //     continue;
                // }
                try
                {
                    // tasks.Add(retirosService.AsignarAsync(retiro));
                    await retirosService.AsignarAsync(retiro);
                    asignados++;

                    //this.RetirosActual.Remove(retiro);
                }
                catch (ExceptionResponse exres)
                {
                    Note.NotifyResponse(exres);
                }
                catch (NullReferenceException nullex)
                {
                    Note.NotifyNull(nullex);
                }

            }

        // await Task.WhenAll(tasks);
        LoadScreen.Close();
        ConfirmFinishedWork();

    }

    public async Task OpenDetail(Retiro retiroModel)
    {
        await dialog.OpenRetiroDetailAsync(retiroModel);
    }
    async void ConfirmToAssign()
    {
        bool? Confirm = await dialog.OpenConfirmDialogAsync($"Confirme la asignacion del sector {sectorName.ToString()}", "Confirmacion");
        if (Confirm != null)
            if ((bool)Confirm)
                await Asignacion();

    }
    async void ConfirmFinishedWork()
    {
        asignar = false;
        await dialog.OpenAlertDialogAsync($"{asignados} Retiros asignados", "Completo");
        asignar = true;
    }
}
