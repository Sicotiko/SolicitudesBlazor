@using BlazorApp1.Client.Services.Dialogs
@using BlazorApp1.Client.Services.Notifications
@using BlazorApp1.Shared.Excepciones
@using BlazorApp1.Shared.Modelo.Comunas
@using BlazorApp1.Shared.Modelo.Retiros
@using BlazorApp1.Shared.Utilities
@inject IRetirosRepoService RetirosRepo
@inject IOrdenTrabajoRepoService OrdenesRepo
@inject INoteService Note
@inject IDialogFrameService dialog
@inject LoadingScreen LoadScreen


<RadzenCard>
    <RadzenText TextStyle="TextStyle.DisplayH3" Text="Auto asignacion de Courier y Valijas:" />
</RadzenCard>


<div class="container-fluid">
    <div class="row px-3">
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenText Text="Sector" />
                <RadzenDropDown Data="@(Enum.GetValues(typeof(SectorName)).Cast<Enum>())"
                                @bind-Value="sectorName" />
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenText Text="Fecha Origen" />
                <RadzenDatePicker @bind-Value="FechaOrigen"
                                  DateFormat="d" />
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-xl-4 p-3">
            <RadzenCard>
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                              Text="Preparar Todo"
                              Click="Preparacion" />
                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                              Text="Asignar Seleccionados"
                              Click="ConfirmToAssign"
                              Disabled="GridLoading" />
            </RadzenCard>
        </div>
    </div>
</div>
@*<RadzenCard>*@
<RadzenText Text="Retiros A Asignar" />
<RadzenDataGrid TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                Data="RetirosActual"
                @ref="gridActual"
                AllowPaging="true"
                PageSize="50"
                AllowAlternatingRows="true"
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                IsLoading="GridLoading"
                AllowColumnResize="true">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay retiros fijos pendientes.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Asignar"
                              Title="Asignar?"
                              Filterable="false"
                              Sortable="false"
                              Width="20">
            <Template Context="retiro">
                <RadzenCheckBox @bind-Value="retiro.Asignar" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoRetiro"
                              Title="N° Retiro"
                              Width="50">
            <Template Context="retiro">
                <RadzenButton Text="@retiro.CodigoRetiro"
                              Click="@(args => OpenDetail(retiro))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Nombre"
                              Title="Nombre"
                              Width="200" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="CodigoCliente"
                              Title="N° Cliente"
                              Width="100" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Direccion"
                              Title="Direccion"
                              Width="250" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Comuna"
                              Title="Comuna"
                              Width="100" />
        <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.Retiros.Retiro"
                              Property="Movil"
                              Title="Movil"
                              Width="30">
            <Template Context="retiro">
                <RadzenTextBox @bind-Value="retiro.Movil"
                               MaxLength="6" />
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
@*</RadzenCard>*@

@code {
    List<BlazorApp1.Shared.Modelo.Retiros.Retiro> RetirosOrigen;
    List<BlazorApp1.Shared.Modelo.Retiros.Retiro> RetirosActual;
    SectorName sectorName;
    DateTime FechaOrigen = DateTime.Now;
    DateTime FechaActual = DateTime.Now;
    //RadzenDataGrid<BlazorApp1.Shared.Modelo.Retiros.Retiro> gridOrigen;
    RadzenDataGrid<BlazorApp1.Shared.Modelo.Retiros.Retiro> gridActual;
    bool GridLoading = false;
    int asignados = 0;
    bool asignar = true;


    protected override void OnInitialized()
    {
        //dialog.OnOpen += Open;
        //dialog.OnClose += Close;
    }

    public void Dispose()
    {

        //dialog.OnOpen -= Open;
        //dialog.OnClose -= Close;
    }
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
    }

    void Close(dynamic result)
    {
        //if (result != null)
        //    if (asignar)
        //        if ((bool)result)
        //            await Asignacion();
    }


    private async Task PoblarRetirosOrigen()
    {
        //await BusyDialog("Leyendo retiros anteriores");

        RetirosOrigen = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
        var comunas = Comunas.GetComunasPorSector(sectorName);
        for (int i = 0; i < 2; i++)
        {
            string TipoRetiro = i == 0 ? "COURIER" : "VALIJA";
            foreach (var comuna in comunas)
            {
                IEnumerable<BlazorApp1.Shared.Modelo.Retiros.Retiro> retiros = await RetirosRepo.GetRetirosTodosLosEstados(TipoRetiro, comuna.Value, FechaOrigen, FechaOrigen);
                RetirosOrigen.AddRange(retiros);
            }
            //Ordenar por algun campo el listado
        }
        //await gridOrigen.Reload();
    }
    private async Task PoblarRetirosActuales()
    {
        //await BusyDialog("Leyendo retiros pendientes");

        RetirosActual = new List<BlazorApp1.Shared.Modelo.Retiros.Retiro>();
        var comunas = Comunas.GetComunasPorSector(sectorName);
        for (int i = 0; i < 2; i++)
        {
            string TipoRetiro = i == 0 ? "COURIER" : "VALIJA";
            foreach (var comuna in comunas)
            {
                //DEBUG
                IEnumerable<BlazorApp1.Shared.Modelo.Retiros.Retiro> retiros = await RetirosRepo.GetRetirosPendientes(TipoRetiro, comuna.Value, FechaActual, FechaActual);
                //IEnumerable<BlazorApp1.Shared.Modelo.Retiros.Retiro> retiros = await RetirosRepo.GetRetirosPendientes("FICHERO", comuna.Value, FechaActual, FechaActual);

                RetirosActual.AddRange(retiros);
            }
            //Ordenar por algun campo el listado
        }
        await gridActual.Reload();

    }

    private async Task MezclaRetiros()
    {

        if (RetirosActual == null)
            throw new NullReferenceException($"{nameof(RetirosActual)} El listado no puede ser nulo.");
        if (RetirosOrigen == null)
            throw new NullReferenceException($"{nameof(RetirosOrigen)} El listado no puede ser nulo.");
        //await BusyDialog("Haciendo la \"MAGIA\"");

        foreach (var retiro in RetirosActual)
        {
            retiro.Movil = ""; // limpieza de movil asignado por sector por defecto
            var retiroToMix = RetirosOrigen.FirstOrDefault(r => r.Nombre == retiro.Nombre &&
                                                                r.Direccion == retiro.Direccion &&
                                                                r.Contacto == retiro.Contacto &&
                                                                r.AmDesde == retiro.AmDesde &&
                                                                r.AmHasta == retiro.AmHasta &&
                                                                r.PmDesde == retiro.PmDesde &&
                                                                r.PmHasta == retiro.PmHasta);

            if (retiroToMix == null)
                continue;
            else
            {
                retiro.Movil = retiroToMix.Movil;
            }

        }
        //await gridOrigen.Reload();
        await gridActual.Reload();
    }
    private async Task ObtenerOrdenTrabajo(Retiro retiro)
    {
        //await BusyDialog("Asignando N° de OT");


        var ote = OrdenesRepo.Ordenes.FirstOrDefault(ot => ot.Tipo == retiro.TipoRetiro &&
                                                           ot.Movil == retiro.Movil &&
                                                           ot.Fecha == DateTime.Today &&
                                                           ot.Estado != "CERRADA" &&
                                                           ot.Repartos == 0);

        if (ote == null)
        {
            ote = await OrdenesRepo.CreateOrden(int.Parse(retiro.Movil));
            ote.Tipo = retiro.TipoRetiro;
            ote.SectorName = sectorName;
            ote.Comuna = retiro.Comuna;
            OrdenesRepo.Ordenes.Add(ote);
        }

        retiro.Ot = ote.Numero;
    }

    private async Task Preparacion()
    {
        GridLoading = true;

        //BusyDialog();
        //await Task.Run(() => BusyDialog());
        LoadScreen.Show("Cargando...");

        await InvokeAsync(async () =>
        {
            try
            {
                await PoblarRetirosOrigen();
                await PoblarRetirosActuales();
                await MezclaRetiros();
                LoadScreen.Close();
            }
            catch (ExceptionResponse ex)
            {
                LoadScreen.Close();

                Note.NotifyResponse(ex);
            }
            catch (NullReferenceException nullEx)
            {
                LoadScreen.Close();

                Note.NotifyNull(nullEx);
            }
        });
        //await BusyDialog();

        GridLoading = false;
    }
    private async Task Asignacion()
    {

        //BusyDialog();
        LoadScreen.Show("Cargando...");
        asignados = 0;
        if (RetirosActual == null || RetirosOrigen == null)
            Note.NotifyVoidData();
        else
            foreach (var retiro in RetirosActual.Where(r => r.Asignar == true))
            {
                if (retiro.Movil == "")
                    continue;
                try
                {
                    await ObtenerOrdenTrabajo(retiro);

                    await RetirosRepo.AsignarAsync(retiro);
                }catch(ExceptionResponse exres)
                {
                    Note.NotifyResponse(exres);
                }catch(NullReferenceException nullex)
                {
                    Note.NotifyNull(nullex);
                }

                asignados++;
            }
        LoadScreen.Close();
        ConfirmFinishedWork();

    }

    public async Task OpenDetail(Retiro retiroModel)
    {
        await dialog.OpenRetiroDetailAsync(retiroModel);
    }
    async void ConfirmToAssign()
    {
        bool? Confirm = await dialog.OpenConfirmDialogAsync($"Confirme la asignacion del sector {sectorName.ToString()}", "Confirmacion");
        if (Confirm != null)
            if ((bool)Confirm)
                await Asignacion();

    }
    async void ConfirmFinishedWork()
    {
        asignar = false;
        await dialog.OpenAlertDialogAsync($"{asignados} Retiros asignados","Completo");
        asignar = true;
    }
}
