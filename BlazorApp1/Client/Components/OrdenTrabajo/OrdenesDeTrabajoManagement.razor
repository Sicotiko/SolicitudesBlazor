@using BlazorApp1.Client.Services.Dialogs
@using BlazorApp1.Client.Services.Notifications
@using BlazorApp1.Client.Services.OT
@using BlazorApp1.Shared.Excepciones
@inject IOrdenTrabajoRepoService OTRepo
@inject INoteService note
@inject IDialogFrameService dialog
@inject LoadingScreen loading
@inject IJSRuntime Js

<div class="row">
    <div class="col">
        <RadzenCard>
            <div class="input-group">
                <span class="input-group-text">Fecha Desde</span>
                <RadzenDatePicker DateFormat="d" @bind-Value="FechaDesde" />
            </div>
            <div class="input-group">
                <span class="input-group-text">Fecha Hasta</span>
                <RadzenDatePicker DateFormat="d" @bind-Value="FechaHasta" />
            </div>
            <RadzenButton Text="Actualizar" Click="Update" />
        </RadzenCard>
    </div>
    <div class="col">
        <RadzenCard>
            <RadzenButton Text="Cierre Automatico" Click="AutoClose" />

            <RadzenButton Text="Exportar"
                          Click="@Exportar"/>
        </RadzenCard>
    </div>
</div>
<RadzenCard>
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Nueva OT" Click="@InsertRow" Disabled=@(ordenToInsert != null) />
    <RadzenDataGrid @ref="OrdenesGrid"
                    TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                    Data="OTRepo.Ordenes.Where(ot => ot.Repartos == 0)"
                    AllowPaging="true"
                    PageSize="50"
                    AllowSorting="true"
                    AllowAlternatingRows="true"
                    AllowFiltering="true"
                    RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Numero"
                                  Title="N° OT"
                                  Width="100px" />
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Movil"
                                  Title="Movil"
                                  Width="100px">
                <EditTemplate Context="orden">
                    <RadzenTextBox @bind-Value="@orden.Movil" MaxLength="6" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Estado"
                                  Title="Estado"
                                  Width="100px" />
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Fecha"
                                  Title="Fecha"
                                  Width="100px">
                <Template Context="data">
                    <RadzenLabel Text=@data.Fecha.ToShortDateString() />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Comuna"
                                  Title="Comuna"
                                  Width="100px">
                <EditTemplate Context="orden">
                    <RadzenTextBox @bind-Value="@orden.Comuna" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Context="orden"
                                  Title="Controles"
                                  Filterable="false"
                                  Sortable="false"
                                  Width="100px">
                <Template Context="orden">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Variant="Variant.Flat"
                                  Size="ButtonSize.Medium"
                                  Click="(args => DeleteRow(orden))"
                                  @onclick:stopPropagation="true" />
                </Template>
                <EditTemplate Context="orden">
                    <RadzenButton Icon="check"
                                  ButtonStyle="ButtonStyle.Success"
                                  Variant="Variant.Flat"
                                  Size="ButtonSize.Medium"
                                  Click="@((args) => SaveRow(orden))" />
                    <RadzenButton Icon="close"
                                  ButtonStyle="ButtonStyle.Light"
                                  Variant="Variant.Flat"
                                  Size="ButtonSize.Medium"
                                  Click="@((args) => CancelEdit(orden))" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
</RadzenCard>

@code {
    RadzenDataGrid<BlazorApp1.Shared.Modelo.OT.OrdenTrabajo> OrdenesGrid;
    BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenToInsert;
    DateTime FechaDesde = DateTime.Today;
    DateTime FechaHasta = DateTime.Today;

    //protected override async Task OnInitializedAsync()
    //{
    //    await OTRepo.UpdateOrdenes(0, "DEFINITIVA",FechaDesde,FechaHasta);
    //}

    private async Task AutoClose()
    {
        try
        {
            int OtCerradas = 0;

            loading.Show("Cerrando OT's");
            var otes = OTRepo.Ordenes.Where(ot => ot.Repartos == 0);
            foreach (var ote in otes)
            {
                if (await OTRepo.CloseOrden(ote))
                    OtCerradas++;
            }

            await dialog.OpenAlertDialogAsync($"{OtCerradas} Ot's Cerradas", "Completo");

        }
        catch (ExceptionResponse exres)
        {
            note.NotifyResponse(exres);
        }
        catch (NullReferenceException nullex)
        {
            note.NotifyNull(nullex);
        }
        loading.Close();
        await Update();
        await OrdenesGrid.Reload();


    }

    private async Task Update()
    {
        try
        {
            loading.Show("Buscando OT's");
            await OTRepo.UpdateOrdenes(0, "DEFINITIVA", FechaDesde, FechaHasta);
        }
        catch (ExceptionResponse exres)
        {
            note.NotifyResponse(exres);
        }
        catch (NullReferenceException nullex)
        {
            note.NotifyNull(nullex);
        }
        loading.Close();
    }

    private async Task InsertRow()
    {
        ordenToInsert = new BlazorApp1.Shared.Modelo.OT.OrdenTrabajo();
        await OrdenesGrid.InsertRow(ordenToInsert);
    }


    private void OnCreateRow(BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenTrabajo)
    {
        if (ordenTrabajo.Movil != null)
        {
            try
            {
                loading.Show("Creando OT...");
                OTRepo.CreateOrden(int.Parse(ordenTrabajo.Movil));
            }
            catch (ExceptionResponse exres)
            {
                note.NotifyResponse(exres);
            }
            catch (NullReferenceException nullex)
            {
                note.NotifyNull(nullex);
            }
            loading.Close();
        }
    }

    private void CancelEdit(BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenTrabajo)
    {
        if (ordenTrabajo == ordenToInsert)
        {
            ordenToInsert = null;
        }

        OrdenesGrid.CancelEditRow(ordenTrabajo);
    }
    private async Task DeleteRow(BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenTrabajo)
    {
        if (ordenTrabajo == ordenToInsert)
        {
            ordenToInsert = null;
        }
        try
        {
            loading.Show($"Cerrando {ordenTrabajo.Numero}");
            if (await OTRepo.CloseOrden(ordenTrabajo))
            {
                //OrdenesGrid.CancelEditRow(ordenTrabajo);
                note.NotifyOtCerrada(ordenTrabajo);

                await OrdenesGrid.Reload();
            }
            else
                //Agregar Notificacion si no cierra
                note.NotifyOtNoCerrada(ordenTrabajo);
        }
        catch (ExceptionResponse exres)
        {
            note.NotifyResponse(exres);
        }
        catch (NullReferenceException nullex)
        {
            note.NotifyNull(nullex);
        }

        loading.Close();
        await OrdenesGrid.Reload();


    }
    private async Task SaveRow(BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenTrabajo)
    {
        await OrdenesGrid.UpdateRow(ordenTrabajo);
        ordenToInsert = null;
    }

    private async Task Exportar()
    {
        Services.Export export = new Services.Export();
        var response = await export.ToExcel("Titulo",OTRepo.Ordenes.Where(ot => ot.Repartos == 0).ToList());
        string fileName = "Ordenes.xlsx";
        await Js.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(response));
    }
}
