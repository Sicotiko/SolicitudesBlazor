@using BlazorApp1.Client.Services.Dialogs
@using BlazorApp1.Client.Services.Notifications
@using BlazorApp1.Client.Services.OT
@using BlazorApp1.Shared.Excepciones
@using BlazorApp1.Shared.Modelo.OT;
@inject INoteService note
@inject IDialogFrameService dialog
@inject LoadingScreen loading
@inject IJSRuntime Js

@inject OrdenesService ordenesService

<div class="row">
    <div class="col">
        <RadzenCard>
            <div class="input-group">
                <span class="input-group-text">Fecha Desde</span>
                <RadzenDatePicker @bind-Value="filtro.FechaDesde"
                                  DateFormat="d" />
            </div>
            <div class="input-group">
                <span class="input-group-text">Fecha Hasta</span>
                <RadzenDatePicker @bind-Value="filtro.FechaHasta"
                                  DateFormat="d" />
            </div>
            <RadzenText Text=@("Por el cambio horario, debes seleccionar la fecha \"Hasta\" para mañana.") />
            <RadzenButton Text="Actualizar" Click="Update" />
        </RadzenCard>
    </div>
    <div class="col">
        <RadzenCard>
            <RadzenButton Text="Cierre Automatico"
                          Click="AutoClose" />

            <RadzenButton Text="Exportar"
                          Disabled="true"
                          Click="@Exportar" />
        </RadzenCard>
    </div>
</div>
<RadzenCard>
    <RadzenDataGrid @ref="OrdenesGrid"
                    TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                    Data="@ordenTrabajos"
                    AllowPaging="true"
                    PageSize="50"
                    AllowSorting="true"
                    AllowAlternatingRows="true"
                    AllowFiltering="true">
        <Columns>
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Numero"
                                  Title="N° OT"
                                  Width="100px" />
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Movil.Codigo"
                                  Title="Movil"
                                  Width="100px">
                <Template Context="orden">
                    <RadzenText Text="@(new string(orden.Movil.Codigo.ToString().Reverse().Take(3).Reverse().ToArray()))"
                                TextStyle="TextStyle.Body2" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Estado"
                                  Title="Estado"
                                  Width="100px" />
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Property="Fecha"
                                  Title="Fecha"
                                  Width="100px">
                <Template Context="data">
                    <RadzenLabel Text=@data.Fecha.ToShortDateString() />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Title="Comuna"
                                  Width="100px">
                <Template Context="data">
                    <RadzenLabel Text=@data.Comuna?.Nombre />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="BlazorApp1.Shared.Modelo.OT.OrdenTrabajo"
                                  Context="orden"
                                  Title="Controles"
                                  Filterable="false"
                                  Sortable="false"
                                  Width="100px">
                <Template Context="orden">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Variant="Variant.Flat"
                                  Size="ButtonSize.Medium"
                                  Click="(args => CerrarOrden(orden))"
                    @onclick:stopPropagation="true" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
</RadzenCard>

@code {
    RadzenDataGrid<BlazorApp1.Shared.Modelo.OT.OrdenTrabajo> OrdenesGrid;
    BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenToInsert;
    List<BlazorApp1.Shared.Modelo.OT.OrdenTrabajo> ordenTrabajos = new List<BlazorApp1.Shared.Modelo.OT.OrdenTrabajo>();
    FiltroBusquedaOrdenTrabajo filtro = new FiltroBusquedaOrdenTrabajo();
    private int OtCerradas = 0;
    protected override async Task OnInitializedAsync()
    {

        ordenTrabajos = await ordenesService.GetLocalAsync(filtro);
    }

    private async Task AutoClose()
    {
        try
        {
            // int OtCerradas = 0;

            loading.Show("Cerrando OT's");
            var otes = await ordenesService.GetLocalAsync(filtro);
            List<Task> tasks = new List<Task>();
            foreach (var ote in otes)
            {
                tasks.Add(CerrarOrden(ote));
                // if (await OTRepo.CloseOrden(ote))
                //     OtCerradas++;
            }
            await Task.WhenAll(tasks);

            await dialog.OpenAlertDialogAsync($"{OtCerradas} Ot's Cerradas", "Completo");


        }
        catch (ExceptionResponse exres)
        {
            note.NotifyResponse(exres);
        }
        catch (NullReferenceException nullex)
        {
            note.NotifyNull(nullex);
        }
        loading.Close();
        await Update();
        await OrdenesGrid.Reload();
        OtCerradas = 0;
    }

    private async Task CerrarOrden(BlazorApp1.Shared.Modelo.OT.OrdenTrabajo ordenTrabajo)
    {
        if (await ordenesService.CerrarAsync(ordenTrabajo))
            OtCerradas++;
    }

    private async Task Update()
    {
        try
        {
            loading.Show("Buscando OT's");
            // await OTRepo.UpdateOrdenes(0, "DEFINITIVA", FechaDesde, FechaHasta);
            ordenTrabajos = await ordenesService.GetLocalAsync(filtro);
        }
        catch (ExceptionResponse exres)
        {
            note.NotifyResponse(exres);
        }
        catch (NullReferenceException nullex)
        {
            note.NotifyNull(nullex);
        }
        loading.Close();
    }



    private async Task Exportar()
    {
        try
        {
            Services.Export export = new Services.Export();
            var response = await export.ToExcel("Titulo", ordenTrabajos);
            string fileName = "Ordenes.xlsx";
            await Js.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(response));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
